from hashlib import new
import os
from random import sample
import unittest
#mpu6050 needed library
from Kalman import KalmanAngle
import smbus			#import SMBus module of I2C
import time
import math
#joint calculation needed library
from numpy import *
import numpy as np
#prepare the system
if os.name == 'nt':
    import msvcrt
    def getch():
        return msvcrt.getch().decode()
else:
    import sys, tty, termios
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    def getch():
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch

#prepare the AX-12A environment
from dynamixel_sdk import *                    # Uses Dynamixel SDK library

# Control table address
ADDR_MX_TORQUE_ENABLE       = 24                  # Control table address is different in Dynamixel model
ADDR_MX_GOAL_POSITION       = 30
ADDR_MX_PRESENT_POSITION    = 36
ADDR_MX_MOVING_SPPED        = 32

# Protocol version
PROTOCOL_VERSION            = 1.0               # See which protocol version is used in the Dynamixel

# Default setting
BAUDRATE                    = 1000000             # Dynamixel default baudrate : 1000000
DEVICENAME                  = '/dev/ttyUSB0'    # Check which port is being used on your controller
                                                # ex) Windows: "COM1"   Linux: "/dev/ttyUSB0" Mac: "/dev/tty.usbserial-*"

TORQUE_ENABLE               = 1                 # Value for enabling the torque
TORQUE_DISABLE              = 0                 # Value for disabling the torque
DXL_MINIMUM_POSITION_VALUE  = 0           # Dynamixel will rotate between this value
DXL_MAXIMUM_POSITION_VALUE  = 1023            # and this value (note that the Dynamixel would not move when the position value is out of movable range. Check e-manual about the range of the Dynamixel you use.)
DXL_MOVING_STATUS_THRESHOLD = 20                # Dynamixel moving status threshold

#define the motion parameter
test_leg = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
Steering_Num = 18
Frame_Num = 20

model = 0

Goal_angular = []

Goal_angular_forward = [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,485,397,648,540,632,363,480,402,636,495,694,356,526,327,688,499,695,350,461,374,667,563,653,349,453,381,645,480,694,357,540,327,690,484,695,345,446,349,687,580,676,333,435,356,659,464,694,356,554,326,694,470,696,339,440,330,701,586,694,321,427,337,670,448,694,354,568,325,698,457,698,332,445,324,701,581,700,320,433,329,673,433,695,351,581,324,704,445,700,323,457,326,692,568,699,326,448,330,670,427,687,354,586,330,703,440,694,323,470,328,685,554,698,330,464,330,668,435,668,365,580,348,691,446,675,337,484,329,679,540,697,334,480,330,667,453,643,379,563,371,675,461,650,357,499,329,674,526,697,336,495,330,668,480,622,388,540,392,661,485,627,376,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,529,330,668,498,697,336,525,329,674,539,627,376,484,392,661,544,622,388,544,330,667,484,697,334,540,329,679,563,650,357,461,371,675,571,643,379,560,330,668,470,698,330,554,328,685,578,675,337,444,348,691,589,668,365,576,330,670,456,699,326,567,326,692,584,694,323,438,330,703,597,687,354,591,329,673,443,700,320,579,324,701,579,700,323,443,324,704,591,695,351,597,337,670,438,694,321,584,330,701,567,698,332,456,325,698,576,694,354,589,356,659,444,676,333,578,349,687,554,696,339,470,326,694,560,694,356,571,381,645,461,653,349,563,374,667,540,695,345,484,327,690,544,694,357,544,402,636,484,632,363,539,397,648,525,695,350,498,327,688,529,694,356]

Goal_angular_left = [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,510,410,616,512,643,340,514,410,616,512,694,364,512,325,700,512,694,364,506,389,605,512,669,310,518,389,605,514,694,374,512,321,712,510,694,374,503,358,606,512,694,285,521,358,606,516,695,384,512,318,725,508,695,384,501,332,614,512,712,269,523,332,614,519,697,393,512,313,738,505,697,393,502,324,623,512,716,272,522,324,623,522,700,401,512,308,752,502,700,401,505,327,631,512,711,286,519,327,631,523,692,410,512,312,755,501,692,410,508,329,640,512,706,299,516,329,640,521,666,418,512,330,739,503,666,418,510,330,650,512,703,312,514,330,650,518,635,419,512,355,714,506,635,419,512,330,660,512,699,324,512,330,660,514,614,408,512,381,684,510,614,408,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,515,328,681,512,695,348,509,328,681,507,633,360,512,403,634,517,633,360,517,326,693,512,694,359,507,326,693,505,660,332,512,387,622,519,660,332,518,323,705,512,693,369,506,323,705,504,686,307,512,360,620,520,686,307,519,320,717,512,694,379,505,320,717,503,704,292,512,337,626,521,704,292,520,316,730,512,696,389,504,316,730,504,708,294,512,328,635,520,708,294,521,320,732,512,687,398,503,320,732,505,704,307,512,330,645,519,704,307,520,338,717,512,664,404,504,338,717,506,701,319,512,331,655,518,701,319,519,364,692,512,637,402,505,364,692,507,698,331,512,330,665,517,698,331,517,391,664,512,621,390,507,391,664,509,696,343,512,329,676,515,696,343]

Goal_angular_back= [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,544,402,636,484,632,363,539,397,648,525,695,350,498,327,688,529,694,356,571,381,645,461,653,349,563,374,667,540,695,345,484,327,690,544,694,357,589,356,659,444,676,333,578,349,687,554,696,339,470,326,694,560,694,356,597,337,670,438,694,321,584,330,701,567,698,332,456,325,698,576,694,354,591,329,673,443,700,320,579,324,701,579,700,323,443,324,704,591,695,351,576,330,670,456,699,326,567,326,692,584,694,323,438,330,703,597,687,354,560,330,668,470,698,330,554,328,685,578,675,337,444,348,691,589,668,365,544,330,667,484,697,334,540,329,679,563,650,357,461,371,675,571,643,379,529,330,668,498,697,336,525,329,674,539,627,376,484,392,661,544,622,388,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,499,329,674,526,697,336,495,330,668,480,622,388,540,392,661,485,627,376,484,329,679,540,697,334,480,330,667,453,643,379,563,371,675,461,650,357,470,328,685,554,698,330,464,330,668,435,668,365,580,348,691,446,675,337,457,326,692,568,699,326,448,330,670,427,687,354,586,330,703,440,694,323,445,324,701,581,700,320,433,329,673,433,695,351,581,324,704,445,700,323,440,330,701,586,694,321,427,337,670,448,694,354,568,325,698,457,698,332,446,349,687,580,676,333,435,356,659,464,694,356,554,326,694,470,696,339,461,374,667,563,653,349,453,381,645,480,694,357,540,327,690,484,695,345,485,397,648,540,632,363,480,402,636,495,694,356,526,327,688,499,695,350]

Goal_angular_right = [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,517,391,664,512,621,390,507,391,664,509,696,343,512,329,676,515,696,343,519,364,692,512,637,402,505,364,692,507,698,331,512,330,665,517,698,331,520,338,717,512,664,404,504,338,717,506,701,319,512,331,655,518,701,319,521,320,732,512,687,398,503,320,732,505,704,307,512,330,645,519,704,307,520,316,730,512,696,389,504,316,730,504,708,294,512,328,635,520,708,294,519,320,717,512,694,379,505,320,717,503,704,292,512,337,626,521,704,292,518,323,705,512,693,369,506,323,705,504,686,307,512,360,620,520,686,307,517,326,693,512,694,359,507,326,693,505,660,332,512,387,622,519,660,332,515,328,681,512,695,348,509,328,681,507,633,360,512,403,634,517,633,360,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,512,330,660,512,699,324,512,330,660,514,614,408,512,381,684,510,614,408,510,330,650,512,703,312,514,330,650,518,635,419,512,355,714,506,635,419,508,329,640,512,706,299,516,329,640,521,666,418,512,330,739,503,666,418,505,327,631,512,711,286,519,327,631,523,692,410,512,312,755,501,692,410,502,324,623,512,716,272,522,324,623,522,700,401,512,308,752,502,700,401,501,332,614,512,712,269,523,332,614,519,697,393,512,313,738,505,697,393,503,358,606,512,694,285,521,358,606,516,695,384,512,318,725,508,695,384,506,389,605,512,669,310,518,389,605,514,694,374,512,321,712,510,694,374,510,410,616,512,643,340,514,410,616,512,694,364,512,325,700,512,694,364]

Goal_angular_CW = [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,541,400,642,537,632,363,537,400,641,497,694,353,499,327,688,500,694,353,563,378,655,558,652,351,560,378,654,483,695,351,487,327,690,486,694,352,579,354,671,573,675,336,576,354,670,470,695,348,474,326,692,472,695,349,585,335,683,579,693,325,583,335,681,457,695,345,462,325,696,459,695,346,580,328,684,574,700,323,577,328,683,444,696,340,450,324,701,447,696,341,567,329,679,562,699,328,565,329,678,439,689,341,445,331,699,441,689,343,554,329,676,550,698,332,552,329,675,445,670,353,451,349,688,448,670,354,541,329,673,537,697,334,538,330,672,461,646,369,466,372,673,464,646,370,527,330,671,525,697,336,524,330,671,483,624,382,487,392,661,487,624,383,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,500,330,671,499,697,336,497,330,671,537,624,383,537,392,661,541,624,382,486,330,672,487,697,334,483,329,673,560,646,370,558,372,673,563,646,369,472,329,675,474,698,332,470,329,676,576,670,354,573,349,688,579,670,353,459,329,678,462,699,328,457,329,679,583,689,343,579,331,699,585,689,341,447,328,683,450,700,323,444,328,684,577,696,341,574,324,701,580,696,340,441,335,681,445,693,325,439,335,683,565,695,346,562,325,696,567,695,345,448,354,670,451,675,336,445,354,671,552,695,349,550,326,692,554,695,348,464,378,654,466,652,351,461,378,655,538,694,352,537,327,690,541,695,351,487,400,641,487,632,363,483,400,642,524,694,353,525,327,688,527,694,353]

Goal_angular_CCW = [514,409,636,512,623,368,510,409,636,510,694,354,512,327,688,514,694,354,487,400,641,487,632,363,483,400,642,524,694,353,525,327,688,527,694,353,464,378,654,466,652,351,461,378,655,538,694,352,537,327,690,541,695,351,448,354,670,451,675,336,445,354,671,552,695,349,550,326,692,554,695,348,441,335,681,445,693,325,439,335,683,565,695,346,562,325,696,567,695,345,447,328,683,450,700,323,444,328,684,577,696,341,574,324,701,580,696,340,459,329,678,462,699,328,457,329,679,583,689,343,579,331,699,585,689,341,472,329,675,474,698,332,470,329,676,576,670,354,573,349,688,579,670,353,486,330,672,487,697,334,483,329,673,560,646,370,558,372,673,563,646,369,500,330,671,499,697,336,497,330,671,537,624,383,537,392,661,541,624,382,514,330,670,512,697,336,510,330,670,510,615,388,512,401,656,514,615,388,527,330,671,525,697,336,524,330,671,483,624,382,487,392,661,487,624,383,541,329,673,537,697,334,538,330,672,461,646,369,466,372,673,464,646,370,554,329,676,550,698,332,552,329,675,445,670,353,451,349,688,448,670,354,567,329,679,562,699,328,565,329,678,439,689,341,445,331,699,441,689,343,580,328,684,574,700,323,577,328,683,444,696,340,450,324,701,447,696,341,585,335,683,579,693,325,583,335,681,457,695,345,462,325,696,459,695,346,579,354,671,573,675,336,576,354,670,470,695,348,474,326,692,472,695,349,563,378,655,558,652,351,560,378,654,483,695,351,487,327,690,486,694,352,541,400,642,537,632,363,537,400,641,497,694,353,499,327,688,500,694,353]

Origin_angular = [575, 348, 616, 512, 679, 343, 449, 348, 616, 449, 676, 408, 512, 345, 681, 575, 676, 408]

Origin_banlance_angular = [512, 210, 814, 512, 814, 210, 511, 210, 814, 511, 814, 210, 512, 210, 814, 513, 814, 210]

Dance = [549,74,887,512,615,356,475,74,887,514,642,344,512,50,914,510,642,344,549,60,908,512,617,355,513,38,1015,513,662,336,512,52,911,511,627,348,550,50,925,512,626,350,512,77,957,512,686,323,512,59,902,512,617,350,552,44,936,512,639,343,511,109,914,511,712,307,512,69,889,513,613,348,553,43,939,512,657,333,509,139,877,509,740,286,512,-6,1092,515,614,345,555,48,935,512,678,320,507,169,845,507,769,261,512,54,998,517,620,340,557,58,923,512,702,303,505,199,816,505,799,233,512,88,951,519,631,334,558,72,905,512,728,284,503,228,791,503,830,200,512,120,912,521,647,326,559,89,882,512,756,262,502,257,769,502,861,164,512,150,877,522,666,316,523,55,1008,512,785,237,501,285,750,501,893,124,512,180,844,523,688,304,524,96,947,512,814,210,500,311,734,500,928,77,512,210,814,524,713,290,523,131,900,512,844,180,501,336,720,501,969,16,512,239,787,523,739,274,522,163,860,512,874,147,502,358,708,465,935,142,512,268,762,522,767,255,521,194,824,512,904,112,503,377,698,466,952,119,512,296,740,521,796,233,519,225,791,512,936,73,505,393,690,467,966,101,512,322,721,519,825,208,517,255,763,512,970,26,507,404,684,469,976,89,512,346,704,517,855,179,515,284,738,512,1030,-68,509,410,679,471,981,85,512,367,691,515,885,147,513,312,717,512,955,135,511,411,676,472,980,88,512,385,681,513,915,110,512,338,701,512,965,122,512,407,674,474,974,99,512,398,674,512,947,67,511,362,688,512,972,113,513,397,676,475,964,116,512,407,669,511,986,9,510,382,680,512,974,110,514,382,680,475,950,137,512,409,668,549,950,137,511,397,676,512,972,113,513,362,688,513,986,9,512,407,669,549,964,116,512,407,674,512,965,122,512,338,701,512,947,67,512,398,674,550,974,99,513,411,676,512,955,135,511,312,717,511,915,110,512,385,681,552,980,88,515,410,679,512,1030,-68,509,284,738,509,885,147,512,367,691,553,981,85,517,404,684,512,970,26,507,255,763,507,855,179,512,346,704,555,976,89,519,393,690,512,936,73,505,225,791,505,825,208,512,322,721,557,966,101,521,377,698,512,904,112,503,194,824,503,796,233,512,296,740,558,952,119,522,358,708,512,874,147,502,163,860,502,767,255,512,268,762,559,935,142,523,336,720,512,844,180,501,131,900,501,739,274,512,239,787,523,969,16,524,311,734,512,814,210,500,96,947,500,713,290,512,210,814,524,928,77,523,285,750,512,785,237,501,55,1008,501,688,304,512,180,844,523,893,124,522,257,769,512,756,262,465,89,882,502,666,316,512,150,877,522,861,164,521,228,791,512,728,284,466,72,905,503,647,326,512,120,912,521,830,200,519,199,816,512,702,303,467,58,923,505,631,334,512,88,951,519,799,233,517,169,845,512,678,320,469,48,935,507,620,340,512,54,998,517,769,261,515,139,877,512,657,333,471,43,939,509,614,345,512,-6,1092,515,740,286,513,109,914,512,639,343,472,44,936,511,613,348,512,69,889,513,712,307,512,77,957,512,626,350,474,50,925,512,617,350,512,59,902,512,686,323,511,38,1015,512,617,355,475,60,908,513,627,348,512,52,911,511,662,336,512, 210, 814, 512, 814, 210, 511, 210, 814, 511, 814, 210, 512, 210, 814, 513, 814, 210]

Goal_angular_forward_H = [513,314,734,512,710,290,511,314,734,511,814,210,512,210,814,513,814,210,495,301,748,531,722,282,492,304,737,501,814,212,522,210,815,504,815,207,479,273,773,548,748,261,475,278,753,491,813,214,531,210,816,494,816,203,469,241,804,559,780,233,462,247,778,481,813,214,541,209,818,485,817,198,464,214,831,564,806,208,457,221,801,472,813,214,551,208,821,476,818,192,468,204,838,560,816,200,462,211,811,462,813,213,560,208,824,468,820,186,476,206,832,551,816,203,472,211,810,457,803,223,564,218,816,464,810,193,485,207,826,541,815,206,481,211,810,462,777,246,559,244,791,469,783,220,494,208,821,531,814,208,491,211,810,475,746,271,548,276,763,479,751,251,504,209,817,522,814,209,501,210,812,492,720,287,531,302,742,495,723,276,513,210,814,512,814,210,511,210,814,511,710,290,512,314,734,513,710,290,523,210,812,502,814,209,520,209,817,529,723,276,493,302,742,532,720,287,533,211,810,493,814,208,530,208,821,545,751,251,476,276,763,549,746,271,543,211,810,483,815,206,539,207,826,555,783,220,465,244,791,562,777,246,552,211,810,473,816,203,548,206,832,560,810,193,460,218,816,567,803,223,562,211,811,464,816,200,556,204,838,556,820,186,464,208,824,562,813,213,567,221,801,460,806,208,560,214,831,548,818,192,473,208,821,552,813,214,562,247,778,465,780,233,555,241,804,539,817,198,483,209,818,543,813,214,549,278,753,476,748,261,545,273,773,530,816,203,493,210,816,533,813,214,532,304,737,493,722,282,529,301,748,520,815,207,502,210,815,523,814,212]
Goal_angular_left_H = [513,314,734,512,710,290,511,314,734,511,814,210,512,210,814,513,814,210,510,311,711,512,733,249,514,311,711,513,811,225,512,206,831,511,811,225,506,286,705,512,769,200,518,286,705,514,810,239,512,201,849,510,810,239,503,251,716,512,809,148,521,251,716,517,809,252,512,195,869,507,809,252,501,223,734,512,840,108,523,223,734,519,810,264,512,187,892,505,810,264,502,213,749,512,847,107,522,213,749,522,811,275,512,177,917,502,811,275,505,214,760,512,837,132,519,214,760,523,801,290,512,184,916,501,801,290,507,215,772,512,829,155,517,215,772,521,773,308,512,215,876,503,773,308,510,214,785,512,823,175,514,214,785,518,738,319,512,255,824,506,738,319,511,213,799,512,818,193,513,213,799,514,713,313,512,291,775,510,713,313,513,210,814,512,814,210,511,210,814,511,710,290,512,314,734,513,710,290,515,206,831,512,811,225,509,206,831,508,732,250,512,311,710,516,732,250,516,201,849,512,810,240,508,201,849,506,768,201,512,286,705,518,768,201,517,195,869,512,809,253,507,195,869,504,808,149,512,251,715,520,808,149,519,187,891,512,810,265,505,187,891,504,840,109,512,222,733,520,840,109,520,177,916,512,812,276,504,177,916,504,847,108,512,212,748,520,847,108,520,184,915,512,802,291,504,184,915,505,837,133,512,214,759,519,837,133,520,216,875,512,773,309,504,216,875,507,829,155,512,215,771,517,829,155,518,256,823,512,738,319,506,256,823,508,823,175,512,214,784,516,823,175,516,292,774,512,713,314,508,292,774,509,818,193,512,213,799,515,818,193]
Goal_angular_back_H= [513,314,734,512,710,290,511,314,734,511,814,210,512,210,814,513,814,210,532,304,737,493,722,282,529,301,748,520,815,207,502,210,815,523,814,212,549,278,753,476,748,261,545,273,773,530,816,203,493,210,816,533,813,214,562,247,778,465,780,233,555,241,804,539,817,198,483,209,818,543,813,214,567,221,801,460,806,208,560,214,831,548,818,192,473,208,821,552,813,214,562,211,811,464,816,200,556,204,838,556,820,186,464,208,824,562,813,213,552,211,810,473,816,203,548,206,832,560,810,193,460,218,816,567,803,223,543,211,810,483,815,206,539,207,826,555,783,220,465,244,791,562,777,246,533,211,810,493,814,208,530,208,821,545,751,251,476,276,763,549,746,271,523,210,812,502,814,209,520,209,817,529,723,276,493,302,742,532,720,287,513,210,814,512,814,210,511,210,814,511,710,290,512,314,734,513,710,290,504,209,817,522,814,209,501,210,812,492,720,287,531,302,742,495,723,276,494,208,821,531,814,208,491,211,810,475,746,271,548,276,763,479,751,251,485,207,826,541,815,206,481,211,810,462,777,246,559,244,791,469,783,220,476,206,832,551,816,203,472,211,810,457,803,223,564,218,816,464,810,193,468,204,838,560,816,200,462,211,811,462,813,213,560,208,824,468,820,186,464,214,831,564,806,208,457,221,801,472,813,214,551,208,821,476,818,192,469,241,804,559,780,233,462,247,778,481,813,214,541,209,818,485,817,198,479,273,773,548,748,261,475,278,753,491,813,214,531,210,816,494,816,203,495,301,748,531,722,282,492,304,737,501,814,212,522,210,815,504,815,207]
Goal_angular_right_H = [513,314,734,512,710,290,511,314,734,511,814,210,512,210,814,513,814,210,516,292,774,512,713,314,508,292,774,509,818,193,512,213,799,515,818,193,518,256,823,512,738,319,506,256,823,508,823,175,512,214,784,516,823,175,520,216,875,512,773,309,504,216,875,507,829,155,512,215,771,517,829,155,520,184,915,512,802,291,504,184,915,505,837,133,512,214,759,519,837,133,520,177,916,512,812,276,504,177,916,504,847,108,512,212,748,520,847,108,519,187,891,512,810,265,505,187,891,504,840,109,512,222,733,520,840,109,517,195,869,512,809,253,507,195,869,504,808,149,512,251,715,520,808,149,516,201,849,512,810,240,508,201,849,506,768,201,512,286,705,518,768,201,515,206,831,512,811,225,509,206,831,508,732,250,512,311,710,516,732,250,513,210,814,512,814,210,511,210,814,511,710,290,512,314,734,513,710,290,511,213,799,512,818,193,513,213,799,514,713,313,512,291,775,510,713,313,510,214,785,512,823,175,514,214,785,518,738,319,512,255,824,506,738,319,507,215,772,512,829,155,517,215,772,521,773,308,512,215,876,503,773,308,505,214,760,512,837,132,519,214,760,523,801,290,512,184,916,501,801,290,502,213,749,512,847,107,522,213,749,522,811,275,512,177,917,502,811,275,501,223,734,512,840,108,523,223,734,519,810,264,512,187,892,505,810,264,503,251,716,512,809,148,521,251,716,517,809,252,512,195,869,507,809,252,506,286,705,512,769,200,518,286,705,514,810,239,512,201,849,510,810,239,510,311,711,512,733,249,514,311,711,513,811,225,512,206,831,511,811,225]
Goal_angular_CW_H = [513,272,762,512,752,262,511,272,762,511,814,210,512,210,814,513,814,210,537,265,769,535,759,255,535,265,769,498,814,209,500,210,815,501,814,209,558,248,787,555,776,238,556,248,787,486,815,207,488,209,817,489,815,207,572,228,810,569,796,216,570,228,809,474,815,204,476,209,820,476,815,204,578,212,828,575,812,198,576,212,827,462,817,199,465,208,824,465,816,200,573,206,831,570,818,194,571,206,830,451,818,193,454,206,830,453,818,194,562,207,825,559,816,200,559,208,824,446,812,196,449,212,826,448,812,197,550,209,820,548,815,204,548,209,820,452,796,214,455,228,808,454,796,215,538,209,817,536,815,207,535,209,817,466,776,237,469,248,786,468,776,237,526,210,815,524,814,209,523,210,815,487,759,255,489,265,769,489,759,255,513,210,814,512,814,210,511,210,814,511,752,262,512,272,762,513,752,262,501,210,815,500,814,209,498,210,815,535,759,255,535,265,769,537,759,255,489,209,817,488,815,207,486,209,817,556,776,237,555,248,786,558,776,237,476,209,820,476,815,204,474,209,820,570,796,215,569,228,808,572,796,214,465,208,824,465,816,200,462,207,825,576,812,197,575,212,826,578,812,196,453,206,830,454,818,194,451,206,831,571,818,194,570,206,830,573,818,193,448,212,827,449,812,198,446,212,828,559,816,200,559,208,824,562,817,199,454,228,809,455,796,216,452,228,810,548,815,204,548,209,820,550,815,204,468,248,787,469,776,238,466,248,787,535,815,207,536,209,817,538,815,207,489,265,769,489,759,255,487,265,769,523,814,209,524,210,815,526,814,209]
Goal_angular_CCW_H = [513,272,762,512,752,262,511,272,762,511,814,210,512,210,814,513,814,210,489,265,769,489,759,255,487,265,769,523,814,209,524,210,815,526,814,209,468,248,787,469,776,238,466,248,787,535,815,207,536,209,817,538,815,207,454,228,809,455,796,216,452,228,810,548,815,204,548,209,820,550,815,204,448,212,827,449,812,198,446,212,828,559,816,200,559,208,824,562,817,199,453,206,830,454,818,194,451,206,831,571,818,194,570,206,830,573,818,193,465,208,824,465,816,200,462,207,825,576,812,197,575,212,826,578,812,196,476,209,820,476,815,204,474,209,820,570,796,215,569,228,808,572,796,214,489,209,817,488,815,207,486,209,817,556,776,237,555,248,786,558,776,237,501,210,815,500,814,209,498,210,815,535,759,255,535,265,769,537,759,255,513,210,814,512,814,210,511,210,814,511,752,262,512,272,762,513,752,262,526,210,815,524,814,209,523,210,815,487,759,255,489,265,769,489,759,255,538,209,817,536,815,207,535,209,817,466,776,237,469,248,786,468,776,237,550,209,820,548,815,204,548,209,820,452,796,214,455,228,808,454,796,215,562,207,825,559,816,200,559,208,824,446,812,196,449,212,826,448,812,197,573,206,831,570,818,194,571,206,830,451,818,193,454,206,830,453,818,194,578,212,828,575,812,198,576,212,827,462,817,199,465,208,824,465,816,200,572,228,810,569,796,216,570,228,809,474,815,204,476,209,820,476,815,204,558,248,787,555,776,238,556,248,787,486,815,207,488,209,817,489,815,207,537,265,769,535,759,255,535,265,769,498,814,209,500,210,815,501,814,209]
Present_position = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]
# function defined to help to calculate the joint angular
rad2deg = 57.29578
j3bias=10.91
#机械位形信息
#三条腿长
l1=45
l2=93.5
l3=124.14
#六个关节base到中心（世界坐标系原点）的距离/角度信息
xx1=115.0
yy1=65.0
yy2=95.0
theta1=80.0
theta2=89.93
theta3=100.0
#六个脚在地面的接触点到中心的初始距离信息（初始偏置）
xxx1=142.15
yyy1=224.71
yyy2=257
zzz1=-118
#定义扩展旋转平移矩阵
def TROTZ(theta):
    r = theta/rad2deg
    TR = np.array([[math.cos(r),-math.sin(r),0.0,0.0],[math.sin(r),math.cos(r),0.0,0.0],[0.0,0.0,1.0,0.0],[0.0,0.0,0.0,1.0]])
    return TR

def TRANSL(x,y,z):
    TL = np.array([[1.0,0.0,0.0,x],[0.0,1.0,0.0,y],[0.0,0.0,1.0,z],[0.0,0.0,0.0,1.0]])
    return TL   

def cd2joint(pxx):
    x = pxx[0]
    y = pxx[1]
    z = pxx[2]
    A=math.sqrt(x*x+y*y)-l1
    B=-z
    if(A>0):
        assert(A*A+(z-l2)*(z-l2))>l3*l3,"不在工作空间内!"
        assert(A*A+z*z)<(l2+l3)*(l2+l3),"不在工作空间内!"
    else:
        assert(A*A+z*z)>(l3-l2)*(l3-l2),"不在工作空间内!"
        assert(A*A+(z+l2)*(z+l2))<l3*l3,"不在工作空间内!"

    #取关节角度
    #r1
    r1=math.atan2(y,x)*rad2deg
    assert r1>-60,"r1<-60, dangerous!"
    assert r1<60,"r1>60, dangerous!"

    #高机位
    if((A*A+z*z)>(l2*l2+l3*l3)):
        #r3
        ccos=math.acos((l2*l2+l3*l3-A*A-B*B)/(2*l2*l3))*rad2deg
        if(ccos>90):
            ccos=180-ccos
        r3=180-ccos-j3bias
        assert r3>90-j3bias,"r3<79.09, dangerous! (可能是低机位的解)"
        assert r3<(180-j3bias),"r3>169.09, dangerous!"
        #r2
        delta=math.atan((l3*math.sin(ccos/rad2deg))/(l2+(l3*math.cos(ccos/rad2deg))))
        ttan=math.atan(B/A)
        r2=-90-(ttan-delta)*rad2deg
        assert r2<0,"r2>0, dangerous!(可能是低机位的解)"
        assert r2>-180,"r2<-180, dangerous!"    
    #低机位   
    else:  
        #r2 
        ccos=math.acos((A*A+B*B+l2*l2-l3*l3)/(2*math.sqrt(A*A+B*B)*l2))*rad2deg
        r2=ccos-(math.atan2(B,A)*rad2deg)-90.0
        assert r2>=-180,"r2<=-180, dangerous!"
        assert r2<0,"r2>0, dangerous!"
        #r3
        ccos2=math.acos((-A*A-B*B+l2*l2+l3*l3)/(2*l2*l3))*rad2deg
        if ccos2>=90.0:
            ccos2 = 180.0 - ccos2
        r3=ccos2-10.91
        assert r3>0,"r3<0, dangerous!"
        assert r3<(90-j3bias),"r3>79.09, dangerous!（可能是高机位的解）"

    q=np.array([[r1],[r2],[r3]])
    return q  

def rotXYAng2jointAng(i,rx,ry):
    #机身脚位置初始偏置
    xo = np.array([xxx1,0.0,-xxx1,xxx1,0.0,-xxx1])   
    yo = np.array([-yyy1,yyy2,-yyy1,yyy1,-yyy2,yyy1]) 
    zo = zzz1

    #(rx，ry)-> p0.0（世界坐标系的目标位置）
    x0=xo[i-1]*math.cos(ry/rad2deg)
    y0=yo[i-1]*math.cos(rx/rad2deg)
    z0=zo-xo[i-1]*math.sin(ry/rad2deg)+yo[i-1]*math.sin(rx/rad2deg)
    
    p00 = np.array([[x0],[y0],[z0],[1]])
    #p0.0->px  (世界坐标到关节坐标)
    pxx = worldCo2jointCo(i,p00)
    #px->ang （关节坐标到关节角）
    try:
        q = cd2joint(pxx)
    except AssertionError as e:
        q = findNext(i,p00)
    return q

def worldCo2jointCo(i,pn):
    pn = np.array([float(pn[0]),float(pn[1]),float(pn[2]),1.0])
    if i == 1:
        Tx_0=TROTZ(theta1).dot(TRANSL(-xx1,yy1,0.0))
    elif i == 2:
        Tx_0=TROTZ(-theta2).dot(TRANSL(0.0,-yy2,0.0))
    elif i == 3:
        Tx_0=TROTZ(theta3).dot(TRANSL(xx1,yy1,0.0))    
    elif i == 4:
        Tx_0=TROTZ(-theta1).dot(TRANSL(-xx1,-yy1,0.0))
    elif i == 5:
        Tx_0=TROTZ(theta2).dot(TRANSL(0.0,yy2,0.0)) 
    elif i == 6:
        Tx_0=TROTZ(-theta3).dot(TRANSL(xx1,-yy1,0.0))
    else:
        Tx_0=np.array([[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]])
        print("sb")
        
    pxx=Tx_0.dot(pn)
    return pxx

def findNext(ii,p00):
    cnt = 0
    pn = np.zeros_like(p00)
    pn[:] = p00
    flag = 0
    while(cnt < 4):
        pn[2] = pn[2] - zzz1
        if(p00[2]>-117.9):
            pn = pn*1.2
        else:
            pn = pn*0.8   
        pn[2]=pn[2]+zzz1   
        cnt=cnt+1 
        pxn=worldCo2jointCo(ii,pn)  

        try:
            qn=cd2joint(pxn)
            flag = 1
            break
        except AssertionError as e:
            continue
        
    assert flag!=0,"无解"
    return qn
# Initialize PortHandler instance
# Set the port path
# Get methods and members of PortHandlerLinux or PortHandlerWindows
portHandler = PortHandler(DEVICENAME)

# Initialize PacketHandler instance
# Set the protocol version
# Get methods and members of Protocol1PacketHandler or Protocol2PacketHandler
packetHandler = PacketHandler(PROTOCOL_VERSION)

# Open port
if portHandler.openPort():
    print("Succeeded to open the port")
else:
    print("Failed to open the port")
    print("Press any key to terminate...")
    getch()
    quit()


# Set port baudrate
if portHandler.setBaudRate(BAUDRATE):
    print("Succeeded to change the baudrate")
else:
    print("Failed to change the baudrate")
    print("Press any key to terminate...")
    getch()
    quit()

# Enable Dynamixel Torque
Online = 1
for i in range(len(test_leg)):
    DXL_ID = test_leg[i]
    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_MX_TORQUE_ENABLE, TORQUE_ENABLE)
    if dxl_comm_result != COMM_SUCCESS:
       print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
       Online = 0
    elif dxl_error != 0:
       print("%s" % packetHandler.getRxPacketError(dxl_error))
       Online = 0
    else:
        print("Dynamixel %d  has been successfully connected \n", DXL_ID)

if (Online==1):
    print("All the servo is online\n")

# Change Dynamixel Speed
Speed = 1
for i in range(len(test_leg)):
    DXL_ID = test_leg[i]
    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_MOVING_SPPED, 112)
    if dxl_comm_result != COMM_SUCCESS:
       print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
       Online = 0
    elif dxl_error != 0:
       print("%s" % packetHandler.getRxPacketError(dxl_error))
       Online = 0
    else:
        print("Dynamixel %d  has been changed speed \n", DXL_ID)

if (Speed==1):
    print("All the servo changed speed\n")
#choose first model of the robot
while 1:
    print("Press key to Start, and chooose model 'm' for low move and 'b' for balence and 'l' for dance and 'h' for high step")
    ch1 = getch()
    if ch1 == chr(0x6d):
        model = 1
        break
    elif ch1 == chr(0x62):
        model = 2
        break
    elif ch1 == chr(0x6c):
        model = 0
        break
    elif ch1 == chr(0x68):
        model = 3
        break
    else:
        print('wrong input')
#randomly initialization        
outthegame = chr(0x6d)            
#main program of the robot
while 1: 
    #decide whether out the game
    if(outthegame ==chr(0x1b)):
        break
    #model 0 decision 
    if model == 0:
        # turn to high robot position
        for i in range(len(test_leg)):
            DXL_ID = test_leg[i]
            dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION,Origin_banlance_angular[i])
        # dive in the model dnace
        while 1:
            #direction choose
            while 1:
                ch = getch()
                if ch == chr(0x6c):
                    Goal_angular = Dance
                    break
                elif ch == chr(0x1b):
                    break
                elif ch == chr(0x6d):
                    model = 1
                    print("change model to low move")
                    break
                elif ch == chr(0x68):
                    model = 3
                    print("change model to high move")
                    break
            # out now game    
            if(ch == chr(0x1b)):
                outthegame = chr(0x1b)
                print("Finish!!!")
                break      
            if(ch == chr(0x6d) or ch == chr(0x68)):
                break     
            Frame_Num = int((len(Goal_angular))/(Steering_Num))
            # Write goal position
            for Frame in range(0,Frame_Num):
                for i in range(len(test_leg)):
                    DXL_ID = test_leg[i]
                    final_angular = Goal_angular[Frame * Steering_Num + i]
                    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, final_angular)
                    Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
                    while abs(Present_position[DXL_ID-1] - final_angular) > 400:
                        Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
        
    #model 1 decision
    if model == 1:
        #turn to low robot position
        for i in range(len(test_leg)):
                DXL_ID = test_leg[i]
                dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION,Origin_angular[i])
        while 1:
            #choose the step       
            print("Press choose the step")
            while 1:
                ch = getch()
                if ch == chr(0x77):
                    direction = 'forword'
                    print(direction)
                    Goal_angular = Goal_angular_forward
                    break 
                elif ch == chr(0x73):
                    direction = 'back'
                    print(direction)
                    Goal_angular = Goal_angular_back
                    break        
                elif ch == chr(0x61):
                    direction = 'left'
                    Goal_angular = Goal_angular_left
                    print(direction)
                    break             
                elif ch == chr(0x64):
                    direction = 'right'
                    Goal_angular = Goal_angular_right
                    print(direction)
                    break
                elif ch == chr(0x71):
                    direction = 'CCW'
                    Goal_angular = Goal_angular_CW
                    print(direction)
                    break
                elif ch == chr(0x65):
                    direction = 'CW'
                    Goal_angular = Goal_angular_CCW
                    print(direction)
                    break
                elif ch == chr(0x62):
                    model = 2
                    break
                elif ch == chr(0x68):
                    model = 3
                    break
                elif ch == chr(0x1b):
                    print("Finish!!!")
                    break
                else:
                    direction = 'wrong input'

            if(ch == chr(0x1b)):
                outthegame = chr(0x1b)
                break      
            if(ch == chr(0x62)):
                print("Change pattern to balance!!!")
                break     
            if(ch == chr(0x68)):
                print("Change pattern to high step!!!")
                break 
            if(len(Goal_angular)==0):
                print("Danger!!!,Goal_angular_table is valid")
                break

            # Write goal position
            Frame_Num = int((len(Goal_angular))/(Steering_Num))
            for Frame in range(0,Frame_Num):
                for i in range(len(test_leg)):
                    DXL_ID = test_leg[i]
                    final_angular = Goal_angular[Frame * Steering_Num + i]
                    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, final_angular)
                    Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
                    while abs(Present_position[DXL_ID-1] - final_angular) > 100:
                        Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)

    #model 3 decision
    if model == 3:
        #turn to high robot position
        for i in range(len(test_leg)):
                DXL_ID = test_leg[i]
                dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION,Origin_banlance_angular[i])
        while 1:
            #choose the step       
            print("Press choose the step")
            while 1:
                ch = getch()
                if ch == chr(0x77):
                    direction = 'forword'
                    print(direction)
                    Goal_angular = Goal_angular_forward_H
                    break 
                elif ch == chr(0x73):
                    direction = 'back'
                    print(direction)
                    Goal_angular = Goal_angular_back_H
                    break        
                elif ch == chr(0x61):
                    direction = 'left'
                    Goal_angular = Goal_angular_left_H
                    print(direction)
                    break             
                elif ch == chr(0x64):
                    direction = 'right'
                    Goal_angular = Goal_angular_right_H
                    print(direction)
                    break
                elif ch == chr(0x71):
                    direction = 'CCW'
                    Goal_angular = Goal_angular_CW_H
                    print(direction)
                    break
                elif ch == chr(0x65):
                    direction = 'CW'
                    Goal_angular = Goal_angular_CCW_H
                    print(direction)
                    break
                elif ch == chr(0x62):
                    model = 2
                    break
                elif ch == chr(0x6d):
                    model = 1
                    break
                elif ch == chr(0x1b):
                    print("Finish!!!")
                    break
                else:
                    direction = 'wrong input' 

            if(ch == chr(0x1b)):
                outthegame = chr(0x1b)
                break      
            if(ch == chr(0x62)):
                print("Change pattern to balance!!!")
                break     
            if(ch == chr(0x6d)):
                print("Change pattern to low step!!!")
                break 
            if(len(Goal_angular)==0):
                print("Danger!!!,Goal_angular_table is valid")
                break

            # Write goal position
            Frame_Num = int((len(Goal_angular))/(Steering_Num))
            for Frame in range(0,Frame_Num):
                for i in range(len(test_leg)):
                    DXL_ID = test_leg[i]
                    final_angular = Goal_angular[Frame * Steering_Num + i]
                    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, final_angular)
                    Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
                    while abs(Present_position[DXL_ID-1] - final_angular) > 100:
                        Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)

    if model ==2:
        for i in range(len(test_leg)):
            DXL_ID = test_leg[i]
            dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION,Origin_banlance_angular[i])
        for i in range(len(test_leg)):
            DXL_ID = test_leg[i]
            dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_MOVING_SPPED, 100)
            if dxl_comm_result != COMM_SUCCESS:
                print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
                Online = 0
            elif dxl_error != 0:
                print("%s" % packetHandler.getRxPacketError(dxl_error))
                Online = 0
            else:
                print("Dynamixel %d  has been changed speed \n", DXL_ID)
        time.sleep(5)        
        #initialization of mpu        
        kalmanX = KalmanAngle()
        kalmanY = KalmanAngle()

        RestrictPitch = True	#Comment out to restrict roll to ±90deg instead - please read: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf
        radToDeg = 57.2957786
        kalAngleX = 0
        kalAngleY = 0
        #some MPU6050 Registers and their Address
        PWR_MGMT_1   = 0x6B
        SMPLRT_DIV   = 0x19
        CONFIG       = 0x1A
        GYRO_CONFIG  = 0x1B
        INT_ENABLE   = 0x38
        ACCEL_XOUT_H = 0x3B
        ACCEL_YOUT_H = 0x3D
        ACCEL_ZOUT_H = 0x3F
        GYRO_XOUT_H  = 0x43
        GYRO_YOUT_H  = 0x45
        GYRO_ZOUT_H  = 0x47


        #Read the gyro and acceleromater values from MPU6050
        def MPU_Init():
            #write to sample rate register
            bus.write_byte_data(DeviceAddress, SMPLRT_DIV, 7)

            #Write to power management register
            bus.write_byte_data(DeviceAddress, PWR_MGMT_1, 1)

            #Write to Configuration register
            #Setting DLPF (last three bit of 0X1A to 6 i.e '110' It removes the noise due to vibration.) https://ulrichbuschbaum.wordpress.com/2015/01/18/using-the-mpu6050s-dlpf/
            bus.write_byte_data(DeviceAddress, CONFIG, int('0000110',2))

            #Write to Gyro configuration register
            bus.write_byte_data(DeviceAddress, GYRO_CONFIG, 24)

            #Write to interrupt enable register
            bus.write_byte_data(DeviceAddress, INT_ENABLE, 1)


        def read_raw_data(addr):
            #Accelero and Gyro value are 16-bit
                high = bus.read_byte_data(DeviceAddress, addr)
                low = bus.read_byte_data(DeviceAddress, addr+1)

                #concatenate higher and lower value
                value = ((high << 8) | low)

                #to get signed value from mpu6050
                if(value > 32768):
                        value = value - 65536
                return value


        bus = smbus.SMBus(1) 	# or bus = smbus.SMBus(0) for older version boards
        DeviceAddress = 0x68   # MPU6050 device address

        MPU_Init()

        time.sleep(1)
        #Read Accelerometer raw value
        accX = read_raw_data(ACCEL_XOUT_H)
        accY = read_raw_data(ACCEL_YOUT_H)
        accZ = read_raw_data(ACCEL_ZOUT_H)

        #print(accX,accY,accZ)
        #print(math.sqrt((accY**2)+(accZ**2)))
        if (RestrictPitch):
            roll = math.atan2(accY,accZ) * radToDeg
            pitch = math.atan(-accX/math.sqrt((accY**2)+(accZ**2))) * radToDeg
        else:
            roll = math.atan(accY/math.sqrt((accX**2)+(accZ**2))) * radToDeg
            pitch = math.atan2(-accX,accZ) * radToDeg
        print(roll)
        kalmanX.setAngle(roll)
        kalmanY.setAngle(pitch)
        gyroXAngle = roll
        gyroYAngle = pitch
        compAngleX = roll
        compAngleY = pitch

        timer = time.time()
        flag = 0
        #important parameter for balance 
        unit_degree = 0.1
        sample_roll = 0.0
        ample_pitch = 0.0
        bias_roll = 0.0
        bias_pitch = 0.0

        while 1:
            if(flag >100): #Problem with the connection
                print("There is a problem with the connection")
                flag=0
                continue
            try:
                #Read Accelerometer raw value
                accX = read_raw_data(ACCEL_XOUT_H)
                accY = read_raw_data(ACCEL_YOUT_H)
                accZ = read_raw_data(ACCEL_ZOUT_H)

                #Read Gyroscope raw value
                gyroX = read_raw_data(GYRO_XOUT_H)
                gyroY = read_raw_data(GYRO_YOUT_H)
                gyroZ = read_raw_data(GYRO_ZOUT_H)

                dt = time.time() - timer
                timer = time.time()

                if (RestrictPitch):
                    roll = math.atan2(accY,accZ) * radToDeg
                    pitch = math.atan(-accX/math.sqrt((accY**2)+(accZ**2))) * radToDeg
                else:
                    roll = math.atan(accY/math.sqrt((accX**2)+(accZ**2))) * radToDeg
                    pitch = math.atan2(-accX,accZ) * radToDeg

                gyroXRate = gyroX/131
                gyroYRate = gyroY/131

                if (RestrictPitch):

                    if((roll < -90 and kalAngleX >90) or (roll > 90 and kalAngleX < -90)):
                        kalmanX.setAngle(roll)
                        complAngleX = roll
                        kalAngleX   = roll
                        gyroXAngle  = roll
                    else:
                        kalAngleX = kalmanX.getAngle(roll,gyroXRate,dt)

                    if(abs(kalAngleX)>90):
                        gyroYRate  = -gyroYRate
                        kalAngleY  = kalmanY.getAngle(pitch,gyroYRate,dt)
                else:

                    if((pitch < -90 and kalAngleY >90) or (pitch > 90 and kalAngleY < -90)):
                        kalmanY.setAngle(pitch)
                        complAngleY = pitch
                        kalAngleY   = pitch
                        gyroYAngle  = pitch
                    else:
                        kalAngleY = kalmanY.getAngle(pitch,gyroYRate,dt)

                    if(abs(kalAngleY)>90):
                        gyroXRate  = -gyroXRate
                        kalAngleX = kalmanX.getAngle(roll,gyroXRate,dt)

                #angle = (rate of change of angle) * change in time
                gyroXAngle = gyroXRate * dt
                gyroYAngle = gyroYAngle * dt

                #compAngle = constant * (old_compAngle + angle_obtained_from_gyro) + constant * angle_obtained from accelerometer
                compAngleX = 0.93 * (compAngleX + gyroXRate * dt) + 0.07 * roll
                compAngleY = 0.93 * (compAngleY + gyroYRate * dt) + 0.07 * pitch

                if ((gyroXAngle < -180) or (gyroXAngle > 180)):
                    gyroXAngle = kalAngleX
                if ((gyroYAngle < -180) or (gyroYAngle > 180)):
                    gyroYAngle = kalAngleY

                print(str(roll)+"  "+str(pitch))

            except Exception as exc:
                flag += 1
            sample_pitch = pitch
            sample_roll = roll
            #calculate update angular
            if abs(sample_pitch) < 2.5 and abs(sample_roll) < 2.5:
                print("No need to balance!!!") 
            else: 
                #calculate joint angular
                Goal_angular = [0.0]*18
                sign = [-1,1,1, -1,-1,-1, -1,1,1, -1,-1,-1, -1,1,1, -1,-1,-1]
                for i in range(0,6):
                    try:
                        q = rotXYAng2jointAng(i+1,bias_roll-unit_degree*sample_roll,bias_pitch-unit_degree*sample_pitch)
                    except AssertionError as e:    
                        print("No solution for joint angular")
                    Goal_angular[i*3] = 512+round(sign[i*3]*float(q[0])/0.29)
                    Goal_angular[i*3+1] = 512+round(sign[i*3+1]*float(q[1])/0.29)
                    Goal_angular[i*3+2] = 512+round(sign[i*3+2]*float(q[2])/0.29)
                    #print(q)
                # Write goal posssssition
                for i in range(len(test_leg)):
                    DXL_ID = test_leg[i]
                    final_angular = Goal_angular[i]
                    #print("Number "+str(i+1)+" angular "+str(final_angular))
                    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_MX_GOAL_POSITION, final_angular)
                    Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
                    while abs(Present_position[DXL_ID-1] - final_angular) > 300:
                        Present_position[DXL_ID-1], dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandler, DXL_ID, ADDR_MX_PRESENT_POSITION)
                #print information update the bias
                print("Succeed to balance!!! we suppose to pitch move" + str(unit_degree*sample_pitch)+" and roll "+str(unit_degree*sample_roll))
                bias_pitch -= unit_degree*sample_pitch
                bias_roll -= unit_degree*sample_roll          

# Disable Dynamixel Torque
for i in range(len(test_leg)):
    DXL_ID = test_leg[i]
    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_MX_TORQUE_ENABLE, TORQUE_DISABLE)
    if dxl_comm_result != COMM_SUCCESS:
      print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
    elif dxl_error != 0:
      print("%s" % packetHandler.getRxPacketError(dxl_error))

# Close port
portHandler.closePort()
